<?xml version="1.0"?>
<doc>
    <assembly>
        <name>rvm</name>
    </assembly>
    <members>
        <member name="M:Runtime.CastToInt(System.Object)">
            <summary>
            Casts last element onto the stack to int32 and push result
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Cast``1(System.Object)">
            <summary>
            Casts last element onto the stack to int32 and push result
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.CastToFloat(System.Object)">
            <summary>
            Casts last element onto the stack to float and push result
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.CastToBool(System.Object)">
            <summary>
            Casts last element onto the stack to bool and push result
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Store(System.Object)">
            <summary>
            Stores the value onto the stack in the local heap
            </summary>
            <param name="args">Index of the local heap into store last stack element</param>
        </member>
        <member name="M:Runtime.Call(System.Object)">
            <summary>
            Calls a function
            </summary>
            <param name="args">Index of function to call</param>
        </member>
        <member name="M:Runtime.Load(System.Object)">
            <summary>
            Loads onto the stack a constant
            </summary>
            <param name="args">Constant to load onto the stack</param>
        </member>
        <member name="M:Runtime.StoreElementIntoArray(System.Object)">
            <summary>
            Takes last element on the stack as array, the second last as index of the element to change and tird last as value to replace with,
            changes the value and push it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.LoadElementFromArray(System.Object)">
            <summary>
            Takes last element on the stack as array, the second last as index of the element to get and
            pushes it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Clear(System.Object)">
            <summary>
            Clears stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.LoadFromStorage(System.Object)">
            <summary>
            Loads from local heap onto the stack
            </summary>
            <param name="args">Index of local heap to load</param>
        </member>
        <member name="M:Runtime.Add(System.Object)">
            <summary>
            Adds last element with second last and pushes it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Sub(System.Object)">
            <summary>
            Subs last element with second last and pushes it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Div(System.Object)">
            <summary>
            Divides last element with second last and pushes it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Mul(System.Object)">
            <summary>
            Multiplies last element with second last and pushes it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Pow(System.Object)">
            <summary>
            Does the power between last element and second last and pushes it onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.RvmOutput(System.Object)">
            <summary>
            Prints the last element onto the stack into the console
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.RvmInput(System.Object)">
            <summary>
            Asks for input and returns onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.RvmShell(System.Object)">
            <summary>
            Calls shell using the last element onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.RvmCall(System.Object)">
            <summary>
            Calls a built in rvm function reference stored onto the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Pop(System.Object)">
            <summary>
            Pops the last element of the stack
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.Return(System.Object)">
            <summary>
            Breaks function executing returning to previous
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.CompareEQ(System.Object)">
            <summary>
            Compares last two elements onto the stack and pushes true if are equals or false
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.CompareGreater(System.Object)">
            <summary>
            Compares last two elements onto the stack and pushes true if last is greater than second last or false
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.CompareLess(System.Object)">
            <summary>
            Compares last two elements onto the stack and pushes true if last is less than second last or false
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.CompareNEQ(System.Object)">
            <summary>
            Compares last two elements onto the stack and pushes true if are not equals or false
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.End(System.Object)">
            <summary>
            Exits to the program
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Runtime.JumpTrue(System.Object)">
            <summary>
            Pops last element of the stack and jump to <paramref name="args"/> if true
            </summary>
            <param name="args">Index of instruction to jump on</param>
        </member>
        <member name="M:Runtime.JumpFalse(System.Object)">
            <summary>
            Pops last element of the stack and jump to <paramref name="args"/> if false
            </summary>
            <param name="args">Index of instruction to jump on</param>
        </member>
        <member name="M:Runtime.SkipTrue(System.Object)">
            <summary>
            Pops last element of the stack and jump to <paramref name="args"/> if false
            </summary>
            <param name="args">Index of instruction to jump on</param>
        </member>
        <member name="M:Runtime.SkipFalse(System.Object)">
            <summary>
            Pops last element of the stack and jump to <paramref name="args"/> if false
            </summary>
            <param name="args">Index of instruction to jump on</param>
        </member>
        <member name="M:Runtime.BackTrue(System.Object)">
            <summary>
            Pops last element of the stack and jump to <paramref name="args"/> if false
            </summary>
            <param name="args">Index of instruction to jump on</param>
        </member>
        <member name="M:Runtime.BackFalse(System.Object)">
            <summary>
            Pops last element of the stack and jump to <paramref name="args"/> if false
            </summary>
            <param name="args">Index of instruction to jump on</param>
        </member>
        <member name="M:Runtime.Jump(System.Object)">
            <summary>
            Jumps to <paramref name="args"/>
            </summary>
            <param name="args">Number of instruction to jump on</param>
        </member>
        <member name="M:Rvm.Execute(Group[])">
            <summary>
            Performs first label of <paramref name="labels"/>
            </summary>
            <param name="labels">Functions</param>
        </member>
    </members>
</doc>
